@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<section class="text-center">
	<div class="p-5 bg-image" style="background-image: url('https://mdbootstrap.com/img/new/textures/full/171.jpg'); height: 300px;"></div>

	<div class="shadow-5-strong" style="margin-top: -100px; background: hsla(0, 0%, 100%, 0.8); backdrop-filter: blur(30px); ">
		<div class="card-body py-5 px-md-5">

			<div class="row d-flex justify-content-center">
				<div class="col-md-4 div-login">
					<h2 class="fw-bold mb-5">APM Admin</h2>
					
					@if (signInAttemptFailed)
					{
						<h3 class="text-center my-3">Please try again and if the issue persists contact the administratorconds.</h3>
						<button type="button" @onclick="Back" class="btn btn-outline-secondary"><i class="fa-solid fa-left-long"></i> Back</button>

					}
					@if (signInSuccessful)
					{
						<h3 class="text-center my-3">Sign in successful. You should be redirected automatically in a few seconds.</h3>
					}
					@if (!signInSuccessful && !signInAttemptFailed)
					{
					<EditForm Model="user" OnValidSubmit="SignInUser">
						<DataAnnotationsValidator />

						<div class="form-group my-3">
							<label for="email">Email</label>
							<InputText @bind-Value="user.Email" id="email" class="form-control" />
							<ValidationMessage class="text-danger" For="@(() => user.Email)" />
						</div>

						<div class="form-group my-3">
							<label for="password">Password</label>
							<InputText @bind-Value="user.Password" id="password" type="password" class="form-control" />
							<ValidationMessage For="@(() => user.Password)" />
						</div>
				 
						<button type="submit" class="btn btn-primary shadow w-100 md-f-size-1-5">
							Sign in
						</button>
					</EditForm>
					}
				</div>
			</div>
		</div>
	</div>
</section>

@code {
	private bool signInAttemptFailed = false;

	private bool signInSuccessful = false;

	private UserLogin user = new();

	private async Task SignInUser()
	{
		var result = await AuthService.Login(user);
		if (!result.Success)
		{
			signInAttemptFailed = true;
		}
		if(result.Success)
		{
			await LocalStorage.SetItemAsync("authToken", result.Data);
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			signInSuccessful = true;
			NavigationManager.NavigateTo("/admin");
		}
	}

	private void Back()
	{
		signInAttemptFailed = false;
		signInSuccessful = false;
		user = new();
	}

}
