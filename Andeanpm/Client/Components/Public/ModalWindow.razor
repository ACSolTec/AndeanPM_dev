<style>
    .modal-content {
        border: none !important;
        background-color: transparent !important;
    }

    .modal-header {
        border-bottom: none !important;
    }

    .carousel-indicators {
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: 15;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-pack: center;
        justify-content: center;
        padding-left: 0;
        margin-right: 15%;
        margin-left: 15%;
        list-style: none;
    }

        .carousel-indicators li {
            box-sizing: content-box;
            -ms-flex: 0 1 auto;
            flex: 0 1 auto;
            width: 30px;
            height: 3px;
            margin-right: 3px;
            margin-left: 3px;
            text-indent: -999px;
            cursor: pointer;
            background-color: #000;
            background-clip: padding-box;
            border-top: 10px solid transparent;
            border-bottom: 10px solid transparent;
            opacity: .5;
            transition: opacity .6s ease;
        }
</style>
<div class="modal fade @modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@modalDisplay">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">

            <div class="modal-header">
                <button @onclick="CloseModal" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div>
                <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">

                    <ol class="carousel-indicators">
                        @for (var i = 0; i < operations.Count; i++)
                        {
                            <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@IsActive(operations[i].Id)"></li>
                        }
                    </ol>
                    <div class="carousel-inner">
                        @for (var i = 0; i < operations.Count; i++)
                        {
                            <div class="carousel-item @IsActive(operations[i].Id)">
                                <img src="@operations[i].ImageLink" class="w-100 modalImg" />
                            </div>
                        }
                    </div>

                    @if (operations.Count > 1)
                    {
                        <button class="carousel-control-prev" type="button" data-target="#carouselExampleIndicators" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-target="#carouselExampleIndicators" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop == true)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    [Parameter] public EventCallback ParentMethodToCallOnClickBtnClose { get; set; }

    [Parameter] public List<Operation> operations { get; set; }

    [Parameter] public int position { get; set; }

    private string modalDisplay = null;
    private string modalClass = null;
    private bool showBackdrop = false;

    protected override void OnInitialized() => ShowModal();

    private void ShowModal()
    {
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;
    }

    private void CloseModal()
    {
        modalDisplay = "none;";
        modalClass = string.Empty;
        showBackdrop = false;
        ParentMethodToCallOnClickBtnClose.InvokeAsync();
    }

    private string IsActive(int Id) => Id == position ? "active" : "";
}