@page "/Admin/OurPeople"

@inject IOurPeopleService OurPeopleService
@inject NavigationManager NavigationManager
@inherits FragmentNavigationBase

<link href="css/admin.css?v=@(DateTime.Now.ToString("MMddyyyyHHmmss"))" rel="stylesheet" />

<AuthorizeView Roles="Admin">
	<Authorized Context="Auth">
		<div id="wrapper" class="@(isClosed ? "toggled" : "")">
			<div class="overlay"></div>

			<Andeanpm.Client.Components.Admin.Sidebar />

			<div id="page-content-wrapper">
				<button type="button" class="hamburger animated fadeInLeft @(isClosed ? "is-open" : "is-closed")" @onclick="OpenMenu" data-toggle="offcanvas">
					<span class="hamb-top"></span>
					<span class="hamb-middle"></span>
					<span class="hamb-bottom"></span>
				</button>
				<div class="container">
					<div class="row justify-content-end">
						<div class="col-sm-12 col-lg-6">
							<nav aria-label="breadcrumb">
								<ol class="breadcrumb">
									<li class="breadcrumb-item"><a href="/Admin">Admin</a></li>
									<li class="breadcrumb-item active" aria-current="page">Our People</li>
								</ol>
							</nav>
						</div>
					</div>
					<div class="row">
						<div class="col-sm-12 col-lg-12">
							<div class="card">
								<h5 class="card-header">@Team</h5>
								
							</div>
							<div class="card-body">
								<div class="row">

									<div class="col-sm-10">
										<select @onchange="SelectedInput">
											<option value="">Select Team</option>
											<option value="Leadership">Leadership Team</option>
											<option value="Bolivia Management">Bolivia Management Team</option>
											<option value="Board of Directors">Board of Directors</option>
										</select>
									</div>
									<div class="col-sm-12 col-lg-2">
										<button type="button" class="btn btn-sm btn-outline-info" @onclick="Create"><i class="fa-solid fa-plus"></i> Add</button>
									</div>
									<br />
									<br />
									<div class="col-sm-12">
										@if (people.Count > 0)
										{
											<div class="table-responsive-sm">
												<table class="table table-striped">
													<thead>
														<tr>
															<th scope="col">#</th>
															<th scope="col">Image</th>
															<th scope="col">Name</th>
															<th scope="col">Position</th>
															<th scope="col">Resume</th>
															<th scope="col">Actions</th>
														</tr>
													</thead>
													<tbody>
														@foreach (var item in people)
														{
															<tr>
																<th scope="row">@item.Position</th>
																<td>

																	<img src="@item.PathImage" alt="" style="width:70px;" />
																</td>
																<td>@item.Title</td>
																<td>@item.Subtitle</td>
																<td>@(CortarCadena(item))</td>
																<td>
																	<button type="button" class="btn btn-sm btn-outline-primary" @onclick="(() => Edit(item.Id))"><i class="fa-solid fa-pen-to-square"></i> Update</button>
																	<button type="button" class="btn btn-sm btn-outline-danger" @onclick="(() => Delete(item.Id))"><i class="fa-solid fa-eraser"></i> Delete</button>
																</td>
															</tr>
														}
													</tbody>
												</table>
											</div>
											<div class="row justify-content-end">
												<div class="col-sm-12">
													<Andeanpm.Client.Components.Admin.Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
												</div>	
											</div>
										}else
										{
											<span>
												Loading products...
											</span>
										}
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
</Authorized>
	<NotAuthorized>
		<Andeanpm.Client.Components.Admin.SignIn />
	</NotAuthorized>
</AuthorizeView>

@code {

	[Parameter] public string Team { get; set; } = string.Empty;

	private bool isClosed { get; set; } = true;

	private List<Person> people { get; set; } = new();

	private MetaData MetaData { get; set; } = new();

	private PaginationParameters paginationParameters = new();

	private int numeroPalabras = 15;

	private string aux { get; set; } = string.Empty;

	private bool cumpleCondicion = true;

	private async Task SelectedPage(int page)
	{
		paginationParameters.PageNumber = page;
		await Get();
	}

	private async Task Get()
	{
		var pagingResponse = await OurPeopleService.GetPeople(paginationParameters, Team);
		people = pagingResponse.Items;
		MetaData = pagingResponse.MetaData;
	}

	private void OpenMenu()
	{
		isClosed = !isClosed;
	}

	private string CortarCadena(Person person)
	{
		string[] fullString = person.Content.Split(" ");

		if (fullString.Length >= numeroPalabras)
		{

			List<string> list = new List<string>();

			for (var i = 0; i < numeroPalabras; i++)
			{
				list.Add(fullString[i]);
			}

			string[] auxString = list.ToArray();

			aux = $"{string.Join(" ", auxString)}...";

		}
		else
		{
			cumpleCondicion = false;
			aux = person.Content;
		}

		return aux;
	}

	private async Task SelectedInput(ChangeEventArgs e)
	{
		if (!string.IsNullOrEmpty(e.Value.ToString()))
		{
			Team = e.Value.ToString();
			await Get();
		}
		else
		{
			people = new(); 
		}
	}

	private void Edit(int id)
	{

		NavigationManager.NavigateTo($"/Admin/OurPeople/Update/{Team}/{id}");
	}

	private void Create()
	{
		if (!string.IsNullOrEmpty(Team))
		{
			NavigationManager.NavigateTo($"/Admin/OurPeople/Update/{Team}");
		}
	}

	private async Task Delete(int id)
	{
		await OurPeopleService.Delete(id);

		await Get();
	}

}